# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  test:
    docker:
      # Specify the version you desire here
      - image: circleci/php:8.0.3-apache
        environment:
          XDEBUG_MODE: coverage
          CC_TEST_REPORTER_ID: 67036e10efc6227d53598e05cf9ee662bd2acb37543879cae02a2e76a2a6cf3d

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      # - image: redis:3
      - image: circleci/mysql:8.0.20-ram
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          WITH_XDEBUG: 1
          MYSQL_USER: root
          MYSQL_DATABASE: dmore_testing
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_PASSWORD: ''

    steps:
      - checkout
      - run:
          name: Install MySQL driver
          command: |
            sudo docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd
            sudo docker-php-ext-install zip bcmath pdo_mysql
            sudo apt-get install -y libzip-dev
            sudo apt-get update && sudo apt-get install -y \
                 libfreetype6-dev \
                 libjpeg62-turbo-dev \
                 libpng-dev \
                 && sudo docker-php-ext-configure gd --with-freetype --with-jpeg \
                 && sudo docker-php-ext-install -j$(nproc) gd

      # composer cache
      - restore_cache:
          keys:
            # "composer.json" can be used if "composer.json"
            # is not committed to the repository.
            - composer-v1-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - composer-v1-
      - run:
          name: Install dependencies
          command: |
            composer install -n --prefer-dist
            composer require --dev php-coveralls/php-coveralls
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # prepare the database
      - run :
          name: Set up Database
          command: |
            cp .env.ci .env
            cp .env.testing.ci .env.testing
            touch storage/dmore_testing.sqlite
            php artisan migrate --env=testing --database=mysql --force
      - run:
          name: Run Code Climate tests
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
            composer run test:coverage
            ./cc-test-reporter after-build --coverage-input-type clover --exit-code $?
#      Disabled Coveralls as it seems to have an issue
#      - run: ./vendor/bin/php-coveralls -v

      - store_test_results:
          path: tests/coverage
      - store_artifacts:
          path: tests/coverage

workflows:
  version: 2
  workflow:
    jobs:
      - test
